#!/usr/bin/env python3
import argparse
import os
import re
import sys
from pathlib import Path


def alias_path():
    return Path(os.path.dirname(os.path.realpath(__file__))) / "aliases.csv"


def aliases():
    with open(alias_path(), "r+") as f:
        return dict(line.strip().split(",") for line in f)


def write_aliases(alias_dict):
    with open(alias_path(), "w+") as f:
        for name, path in sorted(alias_dict.items()):
            f.write("{},{}\n".format(name, path))


valid_alias_regex = re.compile("^[a-zA-Z0-9_][a-zA-Z0-9_-]*$")


def ensure_valid_alias(name):
    if valid_alias_regex.match(name):
        return name
    print("Not a valid alias: '{}'".format(name))
    sys.exit()


parser = argparse.ArgumentParser(
    "tp",
    description="""
    TelePort around your filesystem. 
    When invoked without any arguments all saved aliases and their associated paths are listed.
    When invoked with a single NAME alias your current working directory will be changed to the associated PATH (if it exists).
    """,
)

parser.add_argument(
    "name", nargs="?", type=str, metavar="ALIAS", help="The alias to use."
)

group = parser.add_mutually_exclusive_group()

group.add_argument(
    "-a",
    "--add",
    nargs="?",
    type=str,
    const=True,
    metavar="PATH",
    help="Add alias for the Directory specified by PATH. If no PATH is provided, then the current working directory is used.",
)
group.add_argument(
    "-s", "--show", action="store_true", help="Show PATH for ALIAS",
)
group.add_argument(
    "-r", "--rename", metavar="NAME", type=str, help="Rename existing ALIAS to NAME",
)
group.add_argument(
    "-d",
    "--delete",
    action="store_true",
    help="Remove the ALIAS and its associated PATH from the tp database.",
)

if __name__ == "__main__":

    existing_aliases = aliases()

    if len(sys.argv) < 2:
        if not existing_aliases:
            sys.exit()
        pad = max(len(x) for x in existing_aliases.keys())
        for k, v in existing_aliases.items():
            print("{}\t{}".format(k.ljust(pad), v))
        sys.exit()

    args = parser.parse_args()

    name = args.name
    ensure_valid_alias(name)

    if args.delete:
        if name not in existing_aliases:
            sys.exit()
        del existing_aliases[name]
        write_aliases(existing_aliases)
        sys.exit()

    add_dir = args.add
    existing_mapping = existing_aliases.get(name)

    if args.show:
        if existing_mapping:
            print(existing_mapping)
        sys.exit()

    if args.rename:
        ensure_valid_alias(args.rename)
        rename_existing_alias = existing_aliases.get(args.rename)
        if rename_existing_alias:
            print(
                "'{}' is an existing alias for '{}'".format(
                    args.rename, rename_existing_alias
                )
            )
            sys.exit(1)
        if existing_mapping:
            del existing_aliases[name]
            existing_aliases[args.rename] = existing_mapping
            write_aliases(existing_aliases)
            sys.exit()

    if not add_dir:
        if existing_mapping:
            print(existing_mapping)
        sys.exit()

    # we are adding
    dir = os.getcwd() if add_dir == True else add_dir
    abs_dir = Path(os.path.abspath(dir))
    if not abs_dir.is_dir():
        print("No such directory '{}'".format(abs_dir))
        sys.exit(1)

    if existing_mapping:
        print("'{}' is an existing alias for '{}'".format(name, existing_mapping))
        sys.exit(1)

    existing_aliases[name] = str(abs_dir)
    write_aliases(existing_aliases)

